name: Deploy

on:
  push:
    branches:
      - master
    paths-ignore:
      - "CDK/lib/platform/**"
      - ".github/workflows/platform.yml"
  workflow_dispatch: # Manual trigger

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Print current working directory
        run: pwd

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsAdminRole
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Verify AWS Connection (Print AWS Account ID)
        run: aws sts get-caller-identity

      - name: Set up Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      # ðŸ”¥ Force remove any cached CDK data
      - name: Clean Up Any Residual CDK Bootstrap Data
        run: |
          echo "Cleaning up any old CDK bootstrap files..."
          cd CDK
          rm -rf cdk.out
          rm -rf node_modules/.cdk
          rm -rf node_modules/aws-cdk-lib
          rm -rf node_modules/constructs
          rm -rf package-lock.json
          npm cache clean --force

      - name: Install Fresh CDK Dependencies
        run: |
          cd CDK
          npm install @aws-sdk/client-s3
          npm ci  # Ensures a clean install
          npm list aws-cdk-lib  # Check installed version

      - name: Install AWS CDK CLI & Ensure Path
        run: |
          npm uninstall -g aws-cdk || true  # Ensure fresh install
          npm install -g aws-cdk@latest

          # Ensure the correct path is used for CDK
          echo "Adding npm global bin to PATH..."
          export PATH=$(npm bin -g):$PATH
          echo "Updated PATH: $PATH"

          # Verify installation
          echo "Checking AWS CDK CLI version..."
          which cdk || echo "CDK CLI NOT FOUND"
          cdk --version || echo "CDK CLI FAILED TO RUN"

      - name: Debug CDK Version & Path
        run: |
          echo "Checking AWS CDK CLI version..."
          which cdk  # Verify CLI path
          cdk --version  # Check installed CLI version

          echo "Checking installed AWS CDK libraries..."
          cd CDK  # Make sure we're in the correct directory
          npm list aws-cdk-lib constructs  # Verify installed dependencies

      - name: Bootstrap CDK Environment
        run: |
          cd CDK
          echo "Bootstrapping AWS CDK..."
          npx cdk bootstrap aws://${{ secrets.AWS_ACCOUNT_ID }}/${{ secrets.AWS_REGION }}

      - name: Synthesize CDK Stack
        run: |
          cd CDK
          npx cdk synth || echo "Synthesis failed"

      # ðŸ”¥ DEPLOYMENT STEPS (UNCHANGED)
      - name: Deploy Configuration Stack
        run: |
          cd CDK
          npx cdk deploy ConfigurationStack --require-approval never

      - name: Deploy ECR Stack
        run: |
          cd CDK
          npx cdk deploy EcrStack --require-approval never

      - name: Output GPS_ECR URI
        id: output-gps-ecr-uri
        run: |
          GPS_ECR_URI=$(aws cloudformation describe-stacks --stack-name EcrStack --query "Stacks[0].Outputs[?OutputKey=='GPSEcrRepositoryUri'].OutputValue" --output text)
          echo "GPS_ECR_URI=$GPS_ECR_URI" >> $GITHUB_ENV

      - name: Output ENV_ECR URI
        id: output-env-ecr-uri
        run: |
          ENV_ECR_URI=$(aws cloudformation describe-stacks --stack-name EcrStack --query "Stacks[0].Outputs[?OutputKey=='ENVEcrRepositoryUri'].OutputValue" --output text)
          echo "ENV_ECR_URI=$ENV_ECR_URI" >> $GITHUB_ENV

      - name: Output HEA_ECR URI
        id: output-hea-ecr-uri
        run: |
          HEA_ECR_URI=$(aws cloudformation describe-stacks --stack-name EcrStack --query "Stacks[0].Outputs[?OutputKey=='HEAEcrRepositoryUri'].OutputValue" --output text)
          echo "HEA_ECR_URI=$HEA_ECR_URI" >> $GITHUB_ENV

      - name: Output TEST_ECR URI
        id: output-test-ecr-uri
        run: |
          TEST_ECR_URI=$(aws cloudformation describe-stacks --stack-name EcrStack --query "Stacks[0].Outputs[?OutputKey=='TestEcrRepositoryUri'].OutputValue" --output text)
          echo "TEST_ECR_URI=$TEST_ECR_URI" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Amazon GPS ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.GPS_ECR_URI }}

      - name: Build and Push *GPS* Docker Image
        run: |
          docker build -t ${{ env.GPS_ECR_URI }}:latest -f IoTMockSensors/IoT_GPS/Dockerfile IoTMockSensors/IoT_GPS
          docker push ${{ env.GPS_ECR_URI }}:latest

      - name: Deploy ECS Stack
        run: |
          cd CDK
          export AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}
          export AWS_REGION=${{ secrets.AWS_REGION }}
          npx cdk deploy EcsStack --require-approval never

      - name: Deploy IoT Stack
        run: |
          cd CDK
          npx cdk deploy IotCodeStack --require-approval never
