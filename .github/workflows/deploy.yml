name: Deploy

on:
  push:
    branches:
      - master
  workflow_dispatch: # Manual trigger

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Print current working directory
        run: pwd

      - name: List files in current directory
        run: ls -R

      - name: Set up Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install dependencies
        run: |
          cd CDK
          npm install

      - name: Clean CDK Context
        run: |
          cd CDK
          rm -rf node_modules/.cdk

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsAdminRole
          aws-region: ${{ secrets.AWS_REGION }}

      # Step to Bootstrap the CDK environment
      - name: Bootstrap CDK Environment
        run: |
          cd CDK
          npx cdk bootstrap aws://${{ secrets.AWS_ACCOUNT_ID }}/${{ secrets.AWS_REGION }}

      # Deploy the ECR stack first to create the ECR repository
      - name: Deploy ECR Stack
        run: |
          cd CDK
          npx cdk deploy EcrStack --require-approval never

      # Output ECR URI to use for Docker image pushing
      - name: Output ECR URI
        id: output-ecr-uri
        run: |
          ECR_URI=$(aws cloudformation describe-stacks --stack-name EcrStack --query "Stacks[0].Outputs[?OutputKey=='EcrRepositoryUri'].OutputValue" --output text)
          echo "ECR_URI=$ECR_URI"
          echo "ECR_URI=$ECR_URI" >> $GITHUB_ENV
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Log in to the Amazon ECR registry
      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_URI }}
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}

      # Build and push the Docker image to ECR
      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ env.ECR_URI }}:latest -f IoTMockSensors/IoT_GPS/Dockerfile IoTMockSensors/IoT_GPS
          docker push ${{ env.ECR_URI }}:latest

      # Deploy the ECS stack, which will use the Docker image in the ECR repository
      - name: Deploy ECS Stack
        run: |
          cd CDK
          npx cdk deploy EcsStack --require-approval never  # Specify the ECS stack explicitly
          # Deploy the ECS stack, which will use the Docker image in the ECR repository

      - name: Deploy IoT Stack
        run: |
          cd CDK
          npx cdk deploy IotCodeStack --require-approval never  # Specify the ECS stack explicitly

      - name: Parse S3 Bucket Name from CDK Outputs
        id: parse_s3_bucket
        run: |
          S3_BUCKET=$(cat ./cdk-outputs.json | jq -r '.IotCodeStack.S3GPSBucketName')
          echo "S3_BUCKET=$S3_BUCKET" >> $GITHUB_ENV

      - name: Invoke Lambda to Create Certificates
        run: |
          aws lambda invoke --function-name CreateCertificatesFunction response.json
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Check if certificates uploaded successfully
        run: |
          aws s3 ls s3://$S3_BUCKET/certs/
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
